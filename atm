#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<conio.h>

int A;//语言选择变量 

int language()
{
	int m;
	scanf("%d",&m);
	getchar();
	if (m)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

struct Account
{
	char name[100];
	char username[100];
	char password[100];
	char idCard[100];
	char phone[100];
	float money;

	struct Account *next;
};

typedef struct Account Account;

Account *head = NULL;
Account *tail = NULL;

void getpasswd(Account* pa)
{
	

	char c;
	int i = 0;
	while ((c = getch())!= '\r')
	{
		pa->password[i] = c;
		putchar('*');
		i++;
		
	}
	pa->password[i]='\0';
	return;

}

void addNode(Account *node)
{
	node->next = NULL;
	if (head == NULL)
	{
		head = node;
		tail = node;
	}
	else
	{
		tail->next = node;
		tail = node;
	}
}

//查询 
struct TransactionRecord
{
	char username[100];
	time_t timestamp;
	char type[20];
	float amount;
	float money;

	struct TransactionRecord * next;
};
typedef struct TransactionRecord TR;

TR * trHead = NULL;
TR * trTail = NULL;

void addNodeTR(TR *oNode) 
{
	oNode->next = NULL;
	if (trHead == NULL)
	{
		trHead = oNode;
		trTail = oNode;
	}
	else
	{
		trTail->next = oNode;
		trTail = oNode;
	}
}

//加载数据 
int init()
{
	FILE* fp = fopen("D:\\ATM_account.txt", "r");
	FILE* fp2=fopen("D:\\ATM_transation_record.txt", "r");
	if ((fp == NULL)&&(fp2==NULL))
	{
		return 0;
	}

	else {
				while (!feof(fp))
				{ 
					Account * newNodeP = (Account *)malloc(sizeof(Account));
					fscanf(fp, "%s %s %s %s %s %f\n", newNodeP->name, newNodeP->username, newNodeP->password, newNodeP->idCard, newNodeP->phone, &newNodeP->money);

					addNode(newNodeP);
				}
				while (!feof(fp2))
				{
					TR * newNodeTr=(TR *)malloc(sizeof(TR));
					fscanf(fp2, "%s %ld %s %f %f\n", newNodeTr->username, &newNodeTr->timestamp, newNodeTr->type, &newNodeTr->amount,&newNodeTr->money);

					addNodeTR(newNodeTr);
				}
				return 1;
				fclose(fp);
				fclose(fp2);
		}
}


void printLinkedList()
{
	Account *curP = head;
	TR* curP1 = trHead;
	while (curP != NULL)
	{
			if (A)
			{
				printf("姓名:%-10s账号:%-10s密码:%-10s身份证:%-25s电话:%-12s余额:%f\n"
				, curP->name, curP->username, curP->password, curP->idCard, curP->phone, curP->money);
			}
			else
			{
				printf("name:%-10s ID:%-10s password:%-10s identity card:%-25s phone:%-12s balance:%f\n"
				, curP->name, curP->username, curP->password, curP->idCard, curP->phone, curP->money);
			}
			curP = curP->next;
	}
	while (curP1 != NULL)
	{
		if (A)
		{
			printf("账号：%s\t时间：%ld\t交易类型：%s\t交易金额：%f\t剩余金额：%f\n", curP1->username, curP1->timestamp, curP1->type, curP1->amount,curP1->money);
		}
		else
		{
			printf("ID：%s\t time：%ld\t trade type：%s\t transaction amount：%f\t balance：%f\n", curP1->username, curP1->timestamp, curP1->type, curP1->amount,curP1->money);
		}

		curP1 = curP1->next;
	}
}

void exitFunction()
{
	FILE* fp = fopen("D:\\ATM_account.txt", "w");
	Account * curP = head;
	while (curP != NULL)
	{
		fprintf(fp, "%s\t%s\t%s\t%s\t%s\t%f\n", curP->name, curP->username, curP->password, curP->idCard, curP->phone, curP->money);
		curP = curP->next;
	}
	fclose(fp);
}

void saveTransactionRecord()
{
	FILE* fP = fopen("D:\\ATM_transation_record.txt", "w");
	TR* curP = trHead;
	while (curP != NULL)
	{
		fprintf(fP, "%s\t%ld\t%s\t%f\t%f\n", curP->username, curP->timestamp, curP->type, curP->amount,curP->money);
		curP = curP->next;
	}
	fclose(fP);
}

//开户
void signUp()
{
	system("cls");
	Account * newNodeP = (Account *)malloc(sizeof(Account));
	newNodeP->next=NULL;
	newNodeP->money =0.0f;
	Account P;
		if (A)
		{
			printf("请输入姓名:\n");
			scanf("%s",newNodeP->name);

			printf("请输入身份证号码:\n");
			scanf("%s", newNodeP->idCard);

			printf("请输入电话号码:\n");
			scanf("%s", newNodeP->phone);
			
			printf("请输入密码:\n");
			scanf("%s", newNodeP->password);
			
			char c[100];
			printf("请再次输入您的密码：\n");
			scanf("%s",c);
			
			for(int i=1;i<4;i++)
			{
				if(strcmp(newNodeP->password,c)!=0)
				{
					printf("密码错误，请您重新输入，还有%d次机会。\n",3-i);
					printf("请再次输入您的密码：\n");
					scanf("%s",c);
				}
				else
				{
					srand((unsigned int)time(NULL));
					sprintf(newNodeP->username,"%d",rand()%1000000000000000+100000000000000);
					printf("恭喜你已经成功注册账户，以下是您的账户信息：\n");
					printf("账户：%s\n",newNodeP->username);
					printf("姓名：%s\n",newNodeP->name);
					printf("余额：%s\n",newNodeP->money);
					break;
				}
			}
			getchar();
			addNode(newNodeP);	
		}
		else
		{
			printf("Please enter your name:\n");
			scanf("%s", newNodeP->name);

			printf("Please enter your ID number:\n");
			scanf("%s", newNodeP->idCard);

			printf("Please enter your telephone number:\n");
			scanf("%s", newNodeP->phone);
			
			printf("Please enter your password:\n");
			scanf("%s", newNodeP->password);
			
			char c[100];
			printf("Please enter your password again：\n");
			scanf("%s",c);
			
			for(int i=1;i<4;i++)
			{
				if(strcmp(newNodeP->password,c)!=0)
				{
					printf("You enter the incorrect,there are %d chance.\n",3-i);
					printf("Please enter your password again：\n");
					scanf("%s",c);
				}
				else
				{
					srand((unsigned int)time(NULL));
					sprintf(newNodeP->username,"%d%",rand()%9000+1000);
					printf("Congratulations you have successfully registered account, here is your account information:\n");
					printf("Account：%s\n",newNodeP->username);
					printf("name：%s\n",newNodeP->name);
					printf("surplus：%s\n",newNodeP->money);
					break;
				}
			}
		
			getchar();
			addNode(newNodeP);
			
		}
	}

Account * curAccount=NULL;

int findAccount(Account a)
{
	Account *curP=head;
	while (curP!=NULL)
	{
		if ((strcmp(curP->username,a.username)==0)&&(strcmp(curP->password,a.password)==0))
		{
			curAccount = curP;
			return 1;
		}
		curP=curP->next;
	}
	return 0;
}

//修改密码 
void updatePassword()
{
		if (A)
		{
			printf("请输入旧密码:\n");
			char oldPassword[100] = { '\0' };
			scanf("%s", oldPassword);
			if (strcmp(oldPassword, curAccount->password) == 0)
			{
				printf("请输入新密码：\n");
				scanf("%s", curAccount->password);
				printf("修改成功！\n");
			}
			else
			{
				printf("旧密码输入错误，无法修改！\n");
			}
		}
		else
		{
			printf("Please importation of old passwords:\n");
			char oldPassword[100] = { '\0' };
			scanf("%s", oldPassword);
			if (strcmp(oldPassword, curAccount->password) == 0)
			{
				printf("please enter new password：\n");
				scanf("%s", curAccount->password);
				printf("modify successfully！\n");
			}
			else
			{
				printf("The old password is incorrect and cannot be changed！\n");
			}
		}
	
}

void homePage()
{
	system("cls");
	updatePassword();
}

//存款 
void saveMoney()
{
		float money;
		if (A)
		{
			printf("请输入存钱金额：\n");
			scanf("%f", &money);
			getchar();
			curAccount->money += money;
			printf("存款成功！\n");
		}
		else
		{
			printf("Please enter the deposit amount：\n");
			
			scanf("%f", &money);
			getchar();
			curAccount->money += money;
			printf("Deposit successfully！\n");
		}
	

		exitFunction();

		TR *newNode = (TR *)malloc(sizeof(TR));

		char t[20] = { "存款/收入" };

		strcpy(newNode->username, curAccount->username);
		strcpy(newNode->type, t);        
		newNode->amount = money;         
		newNode->timestamp = time(NULL);
		newNode->money=curAccount->money;

		addNodeTR(newNode);
		saveTransactionRecord();
	
}

//取款 
void drawMoney()
{
	if (A)
	{
		printf("请输入取款金额:\n");
	}
	else
	{
		printf("Please enter the withdrawal amount:\n");
	}
	
	float money;
	scanf("%f", &money);
	getchar();

	if (money>curAccount->money)
	{
		if (A)
		{
			printf("*****金额不足！*****\n");
		}
		else
		{
			printf("*****insufficient fund！*****\n");
		}
		
	}
	else
	{
		curAccount->money = curAccount->money - money;
		if (A)
		{
			printf("*****取款成功！*****\n");
		}
		else
		{
			printf("*****Withdrawals success！*****\n");
		}

		exitFunction();

		TR *newNode = (TR *)malloc(sizeof(TR));
		char t[20] = { "取款/支出" };
		strcpy(newNode->username, curAccount->username);
		strcpy(newNode->type, t);
		newNode->amount = money; 
		newNode->timestamp = time(NULL);
		newNode->money=curAccount->money;

		addNodeTR(newNode);
		saveTransactionRecord();
		return;
		
	}
}

Account * findOtherAccount(char otherUsername[])
{
	Account * curp=head;
	while (curp!=NULL)
	{
		if (strcmp(curp->username, otherUsername)==0)
		{
			return curp;
		}
		curp = curp->next;
	}
	return NULL;
}

//转账 
void transfer()
{
	if (A)
	{
		printf("请输入对方账户：\n");
	}
	else
	{
		printf("Please enter your account：\n");
	}
	char otherUsername[100];
	scanf("%s", otherUsername);
	Account * otherAccont=findOtherAccount(otherUsername);
	if (otherAccont == NULL)
	{
		if (A)
		{
			printf("该账户不合法！\n");
		}
		else
		{
			printf("Account does not exist！\n");
		}
	}
	else
	{
		while(1)
		{
			if (A)
			{
				printf("请输入转账金额：\n");
			}
			else
			{
				printf("Please enter the transfer amount：\n");
			}
			
			int money;
			scanf("%d", &money);
			getchar();

			if(money>curAccount->money)
			{
				if (A)
				{
				printf("余额不足！\n");
				}
				else
				{
				printf("The current account balance is insufficient！\n");
				}
				getch();
			}
			else
			{
				curAccount->money = curAccount->money - money;
				otherAccont->money = otherAccont->money + money;


				if (A)
				{
					printf("转账成功！\n");
				}
				else
				{
					printf("Transfer success！\n");
				}
				exitFunction();
				TR *newNode = (TR *)malloc(sizeof(TR));
				char t[20] = { "转账/转入" };
				strcpy(newNode->username, curAccount->username);
				strcpy(newNode->type, t);
				newNode->amount = money;
				newNode->timestamp = time(NULL);
				newNode->money = curAccount->money;

				addNodeTR(newNode);

				TR *newNode1 = (TR *)malloc(sizeof(TR));
				char other[20] = { "转账/转出" };

				strcpy(newNode1->username, otherAccont->username);
				strcpy(newNode1->type, other);
				newNode1->amount = money;
				newNode1->timestamp = time(NULL);
				newNode1->money = otherAccont->money;

				addNodeTR(newNode1);
				saveTransactionRecord();
				break;
			}
		}
	}
}

//登录
void signIn() 
{
	for (int i = 0; i<3;i++)
	{

		Account a;
		if (A)
		{
			printf("\n*****欢迎登录*****\n\n");
			printf("请输入账号：\n");
			scanf("%s", a.username);
			getchar();

			printf("请输入密码：\n");
		}
		else
		{
			printf("\n*****Welcome to Log on*****\n");
			printf("Please enter mail account username：\n");
			scanf("%s", a.username);
			getchar();

			printf("enter your PIN：\n");
		}
		getpasswd(&a);
		while (1)
		{
			if (findAccount(a))
			{
				if (A)
				{
					printf("\n\n******登录成功！******\n\n");
					printf("*****1、修改密码*****\n");
					printf("*****2、需要取款*****\n");
					printf("*****3、需要存款*****\n");
					printf("*****4、需要转账*****\n");
					printf("*****5、退出登录*****\n");
					printf("请选择你需要的功能：->");
				}
				else
				{
					printf("\n\n***********succeed！***********\n");
					printf("*****1、change password******\n");
					printf("*****2、Need to withdraw money*****\n");
					printf("*****3、liquid funds*****\n");
					printf("*****4、Need to transfer*****\n");
					printf("*****5、Logout*****\n\n");
					printf("Please select the feature you want:->");
				}
				
				int iIint;
				scanf("%d", &iIint);
				getchar();
				if (iIint == 1)
				{
					homePage();
				}
				else if (iIint == 2)
				{
					system("cls"); 
					drawMoney();
				}
				else if (iIint == 3)
				{
					system("cls"); 
					saveMoney();
				}
				else if (iIint == 4)
				{
					system("cls"); 
					transfer();
				}
				else if (iIint == 5)
				{
					system("cls"); 
					return;
				}
			}
			else
			{
				if (A)
				{
					printf("*****登录失败!*****\n");
				}
				else
				{
					printf("*****Logon failed!*****\n");
				}
				break;
			}
		}
		
	}

}


int main()
{
	printf("*****请选择语言				/Please select language ：*****\n");
	printf("*****选择中文按1			/Select Chinese press 1*****\n");
	printf("*****选择英文按2			/Select English press 2*****\n");
	A=language();
	int q = init();
	system("cls");
	if (A)
	{
		if (q == 0)
		{
			printf("*****加载失败！*****\n");
		}
		else
		{
			printf("*****加载成功！*****\n");
		}
	}
	else
	{
		if (q == 0)
		{
			printf("*****Load Fail！*****\n");
		}
		else
		{
			printf("*****onload Function！*****\n");
		}
	}
	char c;
	while (1)
	{
		if (A)
		{
			printf("*****1、开户*****\n");
			printf("*****2、登录*****\n");
			printf("*****3、退出*****\n");
		}
		else
		{
			printf("*****1、sign up*****\n");
			printf("*****2、sign in*****\n");
			printf("*****3、exit*****\n");
		}
		c=getch();
		system("cls");
		switch (c)
		{
			case '1':signUp(); break;
			case '2':signIn(); break;
			case '3':
			{
				printLinkedList();
				saveTransactionRecord();
				exitFunction();
				exit(NULL);
			}
		}
	}

	return 0;
}
